package com.example.hp_pavilion.realapppresensi

import android.app.Activity
import android.app.DatePickerDialog
import android.app.PendingIntent
import android.content.Context
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.content.Intent
import android.content.SharedPreferences
import android.content.SyncRequest
import android.content.pm.PackageManager
import android.graphics.Color
import android.location.Location
import android.os.Build
import android.os.Looper
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import android.view.View
import android.widget.TextView
import android.widget.Toast
import com.google.android.gms.location.LocationListener
import com.google.android.gms.common.ConnectionResult
import com.google.android.gms.location.*
import com.google.android.gms.common.api.GoogleApiClient

import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.*
import com.example.hp_pavilion.realapppresensi.GeofenceTransitionsIntentService
import com.example.hp_pavilion.realapppresensi.storage.SharedPrefManager
import java.sql.Time
import java.sql.Timestamp
import java.text.SimpleDateFormat
import java.util.*
import java.util.jar.Manifest
import kotlin.Result.Companion.failure
import kotlin.Result.Companion.success

class MapsActivity : AppCompatActivity(), OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {
    override fun onConnected(p0: Bundle?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onConnectionSuspended(p0: Int) {
       googleApiClient.connect()

    }

    override fun onConnectionFailed(p0: ConnectionResult) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onLocationChanged(p0: Location?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    lateinit var geofenceRequest: GeofencingRequest
    lateinit var geofenceBuilder: Geofence
    private lateinit var googleApiClient: GoogleApiClient
    lateinit var geofencingClient: GeofencingClient
    private lateinit var mMap: GoogleMap
    private lateinit var button: Button
    private var latitude: Double = 0.toDouble()
    private var longtitude: Double = 0.toDouble()
    private lateinit var mLastLocation: Location
    private var mMarker: Marker? = null
    lateinit var fusedLocationProviderClient: FusedLocationProviderClient
    lateinit var locationRequest: LocationRequest
    lateinit var locationRCallBack: LocationCallback
    lateinit var hadir : Button
    var long = -0.066630
    var lat = 109.341287
    var rad = 900f
    var calendar: Calendar = Calendar.getInstance()
    private lateinit var tvTanggal: TextView
    private lateinit var tvJam : TextView
    private lateinit var tvStatus : TextView

    val tanda = LatLng(long, lat)
    companion object {
        private const val MY_PERMISSION_CODE: Int = 1000
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_maps)



        geofencingClient = LocationServices.getGeofencingClient(this)


        var hari = calendar.get(Calendar.DAY_OF_MONTH)
        var bulan = calendar.get(Calendar.MONTH)
        var tahun = calendar.get(Calendar.YEAR)
        var jam = calendar.get(Calendar.HOUR)
        var menit = calendar.get(Calendar.MINUTE)
        bulan++

        var tgl = "$hari - $bulan - $tahun"
        var jam1 = "$jam : $menit"
        tvTanggal = findViewById(R.id.tanggal)
        tvTanggal.text = tgl
        tvJam = findViewById(R.id.jam)
        tvJam.text = jam1

//        val sharedPreferences = SharedPrefManager(this)
//        val stats = sharedPreferences.status
//        tvStatus = findViewById(R.id.sts)
//        tvStatus.text = stats






        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        val mapFragment = supportFragmentManager
                .findFragmentById(R.id.map) as SupportMapFragment
        mapFragment.getMapAsync(this)

        button = findViewById(R.id.hadir)
        button.setOnClickListener {
            startActivity(Intent(this, CameraActivity::class.java))
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkLocationPermission()) {
                buildLocationRequest();
                buildLocationCallBack();

                fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
                fusedLocationProviderClient.requestLocationUpdates(locationRequest, locationRCallBack, Looper.myLooper())

            }
        } else {
            buildLocationRequest();
            buildLocationCallBack();

            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
            fusedLocationProviderClient.requestLocationUpdates(locationRequest, locationRCallBack, Looper.myLooper())


        }

    }





    fun buildGeofence(){



        geofenceBuilder = (Geofence.Builder()
                // Set the request ID of the geofence. This is a string to identify this
                // geofence.
                .setRequestId("Sudah Sampai Di Geprek Fried Chicken")

                // Set the circular region of this geofence.
                .setCircularRegion(
                        long,
                        lat,
                        rad
                )


                .setExpirationDuration(Geofence.NEVER_EXPIRE)

                // Set the transition types of interest. Alerts are only generated for these
                // transition. We track entry and exit transitions in this sample.
                .setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER or Geofence.GEOFENCE_TRANSITION_EXIT)
                .setNotificationResponsiveness(0)


                .build())


    }

    private fun buildGeofenceRequest() {
        geofenceRequest = GeofencingRequest.Builder()
                .setInitialTrigger(Geofence.GEOFENCE_TRANSITION_ENTER)
                .addGeofence(geofenceBuilder)
                .build()
    }

    fun addGeofence() {
        if (ContextCompat.checkSelfPermission(this,android.Manifest.permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "Permisiion Mot Granted", Toast.LENGTH_SHORT).show()
            ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION),1)
        }else{
            geofencingClient.addGeofences(geofenceRequest, geofencePendingIntent)?.run {
                addOnSuccessListener {
                    Toast.makeText(this@MapsActivity, "Fence Added", Toast.LENGTH_SHORT).show()
                    //addCircleToTheMap()




                }
                addOnFailureListener{
                    Toast.makeText(this@MapsActivity, "Fence Failed",Toast.LENGTH_SHORT).show()
                }
            }
        }


    }

    private fun addCircleToTheMap() {

        val circleOp= CircleOptions().center(tanda).radius(1000.0)
                .strokeColor(Color.argb(50,70,70,70))
                .fillColor(Color.argb(100,150,150,150))

        mMap.addCircle(circleOp)
    }

    private val geofencePendingIntent: PendingIntent by lazy {
        val intent = Intent(this, GeofenceTransitionsIntentService::class.java)
        // We use FLAG_UPDATE_CURRENT so that we get the same pending intent back when calling
        // addGeofences() and removeGeofences().
        PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)


    }



    private fun buildLocationCallBack() {
        locationRCallBack = object : LocationCallback() {
            override fun onLocationResult(p0: LocationResult?) {
                mLastLocation = p0!!.locations.get(p0!!.locations.size - 1)

                if (mMarker != null) {
                    mMarker!!.remove()
                }

                latitude = mLastLocation.latitude
                longtitude = mLastLocation.longitude

                val latLng = LatLng(latitude, longtitude)
                val markerOptions = MarkerOptions()
                        .position(latLng)
                        .title("Kamu Ada Disini")
                        .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))
                mMarker = mMap!!.addMarker(markerOptions)

                mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))
                mMap!!.animateCamera(CameraUpdateFactory.zoomTo(18f))



            }

        }
    }



    private fun buildLocationRequest() {
        locationRequest = LocationRequest()
        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY
        locationRequest.interval = 5000
        locationRequest.fastestInterval = 3000
        locationRequest.smallestDisplacement = 10f
    }

    private fun checkLocationPermission(): Boolean {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, android.Manifest.permission.ACCESS_FINE_LOCATION))
                ActivityCompat.requestPermissions(this, arrayOf(
                        android.Manifest.permission.ACCESS_FINE_LOCATION
                ), MY_PERMISSION_CODE)
            else
                ActivityCompat.requestPermissions(this, arrayOf(
                        android.Manifest.permission.ACCESS_FINE_LOCATION
                ), MY_PERMISSION_CODE)
            return false

        } else
            return true


    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        when (requestCode) {
            MY_PERMISSION_CODE -> {
                if (grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)
                        if (checkLocationPermission()) {
                            buildLocationRequest();
                            buildLocationCallBack();

                            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
                            fusedLocationProviderClient.requestLocationUpdates(locationRequest, locationRCallBack, Looper.myLooper())

                            mMap!!.isMyLocationEnabled = true
                        }
                } else {
                    Toast.makeText(this, "Permission Denied", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    /**override fun onStop() {
    fusedLocationProviderClient.removeLocationUpdates(locationRCallBack)
    super.onStop()
    }
     */
    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the data will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the data has
     * installed Google Play services and returned to the app.
     */
    override fun onMapReady(googleMap: GoogleMap) {
        mMap = googleMap
        buildGeofence()
        buildGeofenceRequest()
        addGeofence()
        addCircleToTheMap()



        // Add a marker in Sydney and move the camera
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                mMap!!.isMyLocationEnabled = true
            }
        } else
            mMap!!.isMyLocationEnabled = true

        mMap.uiSettings.isZoomControlsEnabled = true





    }




}
